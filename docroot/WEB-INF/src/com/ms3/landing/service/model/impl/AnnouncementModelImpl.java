/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ms3.landing.service.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.ms3.landing.service.model.Announcement;
import com.ms3.landing.service.model.AnnouncementModel;
import com.ms3.landing.service.model.AnnouncementSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Announcement service. Represents a row in the &quot;landing_Announcement&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ms3.landing.service.model.AnnouncementModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AnnouncementImpl}.
 * </p>
 *
 * @author John
 * @see AnnouncementImpl
 * @see com.ms3.landing.service.model.Announcement
 * @see com.ms3.landing.service.model.AnnouncementModel
 * @generated
 */
@JSON(strict = true)
public class AnnouncementModelImpl extends BaseModelImpl<Announcement>
	implements AnnouncementModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a announcement model instance should use the {@link com.ms3.landing.service.model.Announcement} interface instead.
	 */
	public static final String TABLE_NAME = "landing_Announcement";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "Title", Types.VARCHAR },
			{ "Content", Types.VARCHAR },
			{ "SetDate", Types.TIMESTAMP },
			{ "Author", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table landing_Announcement (ID LONG not null primary key,Title VARCHAR(75) null,Content VARCHAR(75) null,SetDate DATE null,Author VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table landing_Announcement";
	public static final String ORDER_BY_JPQL = " ORDER BY announcement.SetDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY landing_Announcement.SetDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ms3.landing.service.model.Announcement"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ms3.landing.service.model.Announcement"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Announcement toModel(AnnouncementSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Announcement model = new AnnouncementImpl();

		model.setID(soapModel.getID());
		model.setTitle(soapModel.getTitle());
		model.setContent(soapModel.getContent());
		model.setSetDate(soapModel.getSetDate());
		model.setAuthor(soapModel.getAuthor());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Announcement> toModels(AnnouncementSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Announcement> models = new ArrayList<Announcement>(soapModels.length);

		for (AnnouncementSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ms3.landing.service.model.Announcement"));

	public AnnouncementModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Announcement.class;
	}

	@Override
	public String getModelClassName() {
		return Announcement.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ID", getID());
		attributes.put("Title", getTitle());
		attributes.put("Content", getContent());
		attributes.put("SetDate", getSetDate());
		attributes.put("Author", getAuthor());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long ID = (Long)attributes.get("ID");

		if (ID != null) {
			setID(ID);
		}

		String Title = (String)attributes.get("Title");

		if (Title != null) {
			setTitle(Title);
		}

		String Content = (String)attributes.get("Content");

		if (Content != null) {
			setContent(Content);
		}

		Date SetDate = (Date)attributes.get("SetDate");

		if (SetDate != null) {
			setSetDate(SetDate);
		}

		String Author = (String)attributes.get("Author");

		if (Author != null) {
			setAuthor(Author);
		}
	}

	@JSON
	@Override
	public long getID() {
		return _ID;
	}

	@Override
	public void setID(long ID) {
		_ID = ID;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_Title == null) {
			return StringPool.BLANK;
		}
		else {
			return _Title;
		}
	}

	@Override
	public void setTitle(String Title) {
		_Title = Title;
	}

	@JSON
	@Override
	public String getContent() {
		if (_Content == null) {
			return StringPool.BLANK;
		}
		else {
			return _Content;
		}
	}

	@Override
	public void setContent(String Content) {
		_Content = Content;
	}

	@JSON
	@Override
	public Date getSetDate() {
		return _SetDate;
	}

	@Override
	public void setSetDate(Date SetDate) {
		_SetDate = SetDate;
	}

	@JSON
	@Override
	public String getAuthor() {
		if (_Author == null) {
			return StringPool.BLANK;
		}
		else {
			return _Author;
		}
	}

	@Override
	public void setAuthor(String Author) {
		_Author = Author;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Announcement.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Announcement toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Announcement)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AnnouncementImpl announcementImpl = new AnnouncementImpl();

		announcementImpl.setID(getID());
		announcementImpl.setTitle(getTitle());
		announcementImpl.setContent(getContent());
		announcementImpl.setSetDate(getSetDate());
		announcementImpl.setAuthor(getAuthor());

		announcementImpl.resetOriginalValues();

		return announcementImpl;
	}

	@Override
	public int compareTo(Announcement announcement) {
		int value = 0;

		value = DateUtil.compareTo(getSetDate(), announcement.getSetDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Announcement)) {
			return false;
		}

		Announcement announcement = (Announcement)obj;

		long primaryKey = announcement.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Announcement> toCacheModel() {
		AnnouncementCacheModel announcementCacheModel = new AnnouncementCacheModel();

		announcementCacheModel.ID = getID();

		announcementCacheModel.Title = getTitle();

		String Title = announcementCacheModel.Title;

		if ((Title != null) && (Title.length() == 0)) {
			announcementCacheModel.Title = null;
		}

		announcementCacheModel.Content = getContent();

		String Content = announcementCacheModel.Content;

		if ((Content != null) && (Content.length() == 0)) {
			announcementCacheModel.Content = null;
		}

		Date SetDate = getSetDate();

		if (SetDate != null) {
			announcementCacheModel.SetDate = SetDate.getTime();
		}
		else {
			announcementCacheModel.SetDate = Long.MIN_VALUE;
		}

		announcementCacheModel.Author = getAuthor();

		String Author = announcementCacheModel.Author;

		if ((Author != null) && (Author.length() == 0)) {
			announcementCacheModel.Author = null;
		}

		return announcementCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{ID=");
		sb.append(getID());
		sb.append(", Title=");
		sb.append(getTitle());
		sb.append(", Content=");
		sb.append(getContent());
		sb.append(", SetDate=");
		sb.append(getSetDate());
		sb.append(", Author=");
		sb.append(getAuthor());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.ms3.landing.service.model.Announcement");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ID</column-name><column-value><![CDATA[");
		sb.append(getID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>SetDate</column-name><column-value><![CDATA[");
		sb.append(getSetDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Author</column-name><column-value><![CDATA[");
		sb.append(getAuthor());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Announcement.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Announcement.class
		};
	private long _ID;
	private String _Title;
	private String _Content;
	private Date _SetDate;
	private String _Author;
	private Announcement _escapedModel;
}